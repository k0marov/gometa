package delivery

import (
	"bytes"
	"github.com/k0marov/gometa/lib/helpers"
	"github.com/k0marov/gometa/lib/schema"
	"io"
	"log"
	"strconv"
	"text/template"
)

var deliveryTemplate = template.Must(template.New("").Parse(`
package {{ .PackageName }} 

import (
    "net/http"
    "strconv"
    "github.com/gin-gonic/gin"
)

type {{ .EntityName }}Service interface {
    Create(entity *{{ .EntityName }}) error 
    Get(id uint64) (*{{ .EntityName }}, error) 
    Update(entity *{{ .EntityName }}) error 
    Delete(entity *{{ .EntityName }}) error 
}

type {{ .EntityName }}Handlers struct {
    svc {{ .EntityName }}Service
}

func New{{ .EntityName }}Handlers(svc {{ .EntityName }}Service) *{{ .EntityName }}Handlers {
    return &{{ .EntityName }}Handlers{svc: svc}
}

func (h *{{ .EntityName }}Handlers) Create(c *gin.Context) { 
    toCreate := new({{ .EntityName }})
    if c.BindJSON(toCreate) != nil {
        return 
    }
    err := h.svc.Create(toCreate)
    if err != nil {
        c.Error(err)
        return 
    }
	c.Status(http.StatusOK) 
}

func (h *{{ .EntityName }}Handlers) Get(c *gin.Context) { 
	id, err := strconv.ParseUint(c.Param("id"), 10, 64)
    if err != nil {
        c.String(http.StatusBadRequest, "invalid id parameter") 
        return 
    }
    entity, err := h.svc.Get(id)
    if err != nil {
        c.Error(err)
        return 
    }
    c.JSON(http.StatusOK, entity)
}

func (h *{{ .EntityName }}Handlers) Update(c *gin.Context) { 
    upd := new({{ .EntityName }})
    if c.BindJSON(&upd) != nil {
        return 
    }
    err := h.svc.Update(upd)
    if err != nil {
        c.Error(err)
        return 
    }
	c.Status(http.StatusOK) 
}

func (h *{{ .EntityName }}Handlers) Delete(c *gin.Context) { 
    toDel := new({{ .EntityName }}) 
    if c.BindJSON(&toDel) != nil {
        return 
    }
    err := h.svc.Delete(toDel)
    if err != nil {
        c.Error(err)
        return 
    }
	c.Status(http.StatusOK) 
}
`))

// TODO: deletion by just id

func Generate(ent schema.Entity, out io.Writer) {
	templateData := struct {
		PackageName string
		EntityName  string
	}{
		PackageName: ent.JsonName,
		EntityName:  ent.Name,
	}
	strconv.Atoi("33")
	var generated bytes.Buffer
	err := deliveryTemplate.Execute(&generated, templateData)
	if err != nil {
		log.Fatalf("error while executing delivery template: %v", err)
	}
	helpers.WriteFormatted(generated.Bytes(), out)
}
