package delivery

import (
	"bytes"
	"github.com/k0marov/gometa/lib/helpers"
	"github.com/k0marov/gometa/lib/schema"
	"io"
	"log"
	"text/template"
)

var handlersTemplate = template.Must(template.New("").Parse(`
package {{.PackageName}}

import (
    "net/http"
    "strconv"
    "github.com/gin-gonic/gin"
    "{{ .EntityImport }}"
	//"{{ .ModuleName }}/internal/web/helpers"
)

type Service interface {
    Create(entity *models.{{ .EntityName }}) (*models.{{ .EntityName }}, error)
    Get(id uint64) (*models.{{ .EntityName }}, error) 
    Update(entity *models.{{ .EntityName }}) error 
    Delete(id uint64) error 
}

type Handlers struct {
    svc Service
}

func New{{ .EntityName }}Handlers(svc Service) *Handlers {
    return &Handlers{svc: svc}
}

func (h *Handlers) DefineRoutes(r gin.IRouter) {
    r.POST("/api/v1/{{.PackageName}}s/", h.Create)
	r.GET("/api/v1/{{.PackageName}}s/:id", h.Get) 
    r.PUT("/api/v1/{{.PackageName}}s/", h.Update) 
	r.DELETE("/api/v1/{{.PackageName}}s/:id", h.Delete)
}

func (h *Handlers) Create(c *gin.Context) { 
    toCreate := new(models.{{ .EntityName }})
    if c.BindJSON(toCreate) != nil {
        return 
    }
    created, err := h.svc.Create(toCreate)
    if err != nil {
        c.Error(err)
        return 
    }
	c.JSON(http.StatusOK, created) 
}

func (h *Handlers) Get(c *gin.Context) { 
	id, err := strconv.ParseUint(c.Param("id"), 10, 64)
    if err != nil {
        // TODO: add error
        return 
    }
    entity, err := h.svc.Get(id)
    if err != nil {
        c.Error(err)
        return 
    }
    c.JSON(http.StatusOK, entity)
}

func (h *Handlers) Update(c *gin.Context) { 
    upd := new(models.{{ .EntityName }})
    if c.BindJSON(&upd) != nil {
        return 
    }
    err := h.svc.Update(upd)
    if err != nil {
        c.Error(err)
        return 
    }
	c.Status(http.StatusOK) 
}

func (h *Handlers) Delete(c *gin.Context) { 
	id, err := strconv.ParseUint(c.Param("id"), 10, 64)
    if err != nil {
        // TODO: add error
        return 
    }
    err = h.svc.Delete(id)
    if err != nil {
        c.Error(err)
        return 
    }
	c.Status(http.StatusOK) 
}
`))

func GenerateHandlers(ent schema.Entity, out io.Writer, moduleName, packageName, entityImport string) {
	templateData := struct {
		PackageName  string
		ModuleName   string
		EntityName   string
		EntityImport string
	}{
		ModuleName:   moduleName,
		PackageName:  packageName,
		EntityName:   ent.Name,
		EntityImport: entityImport,
	}
	var generated bytes.Buffer
	err := handlersTemplate.Execute(&generated, templateData)
	if err != nil {
		log.Fatalf("error while executing handlers template: %v", err)
	}
	if err := helpers.WriteFormatted(generated.Bytes(), out); err != nil {
		log.Fatalf("while formatting handlers file: %v", err)
	}
}
