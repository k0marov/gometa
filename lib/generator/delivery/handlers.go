package delivery

import (
	"bytes"
	"github.com/k0marov/gometa/lib/helpers"
	"github.com/k0marov/gometa/lib/schema"
	"io"
	"log"
	"text/template"
)

var handlersTemplate = template.Must(template.New("").Parse(`
package delivery

import (
    "net/http"
    "strconv"
    "github.com/gin-gonic/gin"
    . "{{ .EntityImport }}"
)

type {{ .EntityName }}Service interface {
    Create(entity *{{ .EntityName }}) (*{{ .EntityName }}, error)
    Get(id uint64) (*{{ .EntityName }}, error) 
    Update(entity *{{ .EntityName }}) error 
    Delete(id uint64) error 
}

type {{ .EntityName }}Handlers struct {
    svc {{ .EntityName }}Service
}

func New{{ .EntityName }}Handlers(svc {{ .EntityName }}Service) *{{ .EntityName }}Handlers {
    return &{{ .EntityName }}Handlers{svc: svc}
}

func (h *{{ .EntityName }}Handlers) Create(c *gin.Context) { 
    toCreate := new({{ .EntityName }})
    if c.BindJSON(toCreate) != nil {
        return 
    }
    created, err := h.svc.Create(toCreate)
    if err != nil {
        c.Error(err)
        return 
    }
	c.JSON(http.StatusOK, created) 
}

func (h *{{ .EntityName }}Handlers) Get(c *gin.Context) { 
	id, err := strconv.ParseUint(c.Param("id"), 10, 64)
    if err != nil {
        c.String(http.StatusBadRequest, "invalid id parameter") 
        return 
    }
    entity, err := h.svc.Get(id)
    if err != nil {
        c.Error(err)
        return 
    }
    c.JSON(http.StatusOK, entity)
}

func (h *{{ .EntityName }}Handlers) Update(c *gin.Context) { 
    upd := new({{ .EntityName }})
    if c.BindJSON(&upd) != nil {
        return 
    }
    err := h.svc.Update(upd)
    if err != nil {
        c.Error(err)
        return 
    }
	c.Status(http.StatusOK) 
}

func (h *{{ .EntityName }}Handlers) Delete(c *gin.Context) { 
	id, err := strconv.ParseUint(c.Param("id"), 10, 64)
    if err != nil {
        c.String(http.StatusBadRequest, "invalid id parameter") 
        return 
    }
    err = h.svc.Delete(id)
    if err != nil {
        c.Error(err)
        return 
    }
	c.Status(http.StatusOK) 
}
`))

// TODO: remove code duplication of getting id param

func GenerateHandlers(ent schema.Entity, out io.Writer, entityImport string) {
	templateData := struct {
		EntityName   string
		EntityImport string
	}{
		EntityName:   ent.Name,
		EntityImport: entityImport,
	}
	var generated bytes.Buffer
	err := handlersTemplate.Execute(&generated, templateData)
	if err != nil {
		log.Fatalf("error while executing handlers template: %v", err)
	}
	if err := helpers.WriteFormatted(generated.Bytes(), out); err != nil {
		log.Fatalf("while formatting handlers file: %v", err)
	}
}
