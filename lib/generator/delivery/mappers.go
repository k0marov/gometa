package delivery

import (
	"bytes"
	"fmt"
	"github.com/k0marov/gometa/lib/generator/gen"
	"github.com/k0marov/gometa/lib/helpers"
	"github.com/k0marov/gometa/lib/schema"
	"io"
	"text/template"
)

var entityTemplate = template.Must(template.New("").Parse(`
package {{ .PackageName }} 

import (
    "{{.EntityImport}}"
	{{ if .Entity.HasTimeField }} "time" {{ end }}
)

type Create{{ .Entity.Name }}Req struct { {{ range $field := .Entity.Fields }} 
		{{ if $field.IsPrimaryKey }} {{ continue }} {{ end -}} 
		{{ $field.GoName }} {{ if $field.IsTime }} int64 {{ else }} {{ $field.Type.GolangType }} {{ end }} {{ $field.GetJsonTags }} 
	{{ end }}
}

type {{ .Entity.Name }} struct { {{ range $field := .Entity.Fields }} 
	{{ $field.GoName }} {{ if $field.IsTime }} int64 {{ else }} {{ $field.Type.GolangType }} {{ end }} {{ $field.GetJsonTags }} {{ end }}
}

func (e *{{ .Entity.Name }}) ToEntity() models.{{.Entity.Name}} {
	return models.{{ .Entity.Name }}{ {{ range $field := .Entity.Fields }} 
		{{ $field.GoName }}: {{ if $field.IsTime }} time.Unix(e.{{$field.GoName}}, 0) {{ else }} e.{{ $field.GoName }} {{ end }}, {{ end }}
	}
}

func MapEntity(e models.{{ .Entity.Name }}) {{ .Entity.Name }} {
	return {{ .Entity.Name }}{
		{{- range $field := .Entity.Fields }} 
		{{ $field.GoName }}: {{ if $field.IsTime }} e.{{$field.GoName}}.Unix() {{ else }} e.{{ $field.GoName }} {{ end }}, {{ end }} 
	}
}

func (c Create{{.Entity.Name}}Req) ToDTO() models.Create{{.Entity.Name}}DTO {
	res := models.Create{{.Entity.Name}}DTO{} 

	{{ range $field := .Entity.Fields }} 
		{{ if $field.IsPrimaryKey -}} {{- continue -}} {{- end -}}
		{{- if $field.IsTime -}} 
			if c.{{$field.GoName}} != 0 {
				res.{{$field.GoName}} = time.Unix(c.{{$field.GoName}}, 0) 
			} 
		{{- else -}} res.{{$field.GoName}} = c.{{ $field.GoName -}} 
		{{- end -}}	
	{{- end }}
	return res
}
`))

// TODO: remove unneeded newline after models.{

func GenerateMappers(out io.Writer, ent schema.Entity, genCtx gen.GenerationContext) error {
	templateData := struct {
		gen.GenerationContext
		Entity schema.Entity
	}{
		GenerationContext: genCtx,
		Entity:            ent,
	}
	var generated bytes.Buffer
	err := entityTemplate.Execute(&generated, templateData)
	if err != nil {
		return fmt.Errorf("error while executing json mappers template: %w", err)
	}
	if err := helpers.WriteFormatted(generated.Bytes(), out); err != nil {
		return fmt.Errorf("while formatting json mappers file: %w", err)
	}
	return nil
}
