package repository

import (
	"bytes"
	"fmt"
	"gitlab.sch.ocrv.com.rzd/blockchain/platform/gometa.git/lib/generator/gen"
	"gitlab.sch.ocrv.com.rzd/blockchain/platform/gometa.git/lib/helpers"
	"gitlab.sch.ocrv.com.rzd/blockchain/platform/gometa.git/lib/schema"
	"io"
	"text/template"
)

var entityTemplate = template.Must(template.New("").Parse(`
package {{ .PackageName }} 

import (
    "{{.EntityImport}}"
	{{ if .Entity.HasTimeField }} "time" {{ end }}
)

type {{ .Entity.Name }} struct {
	{{ range $field := .Entity.Fields }} 
	{{ $field.GoName }} {{ $field.Type.GolangType }} {{ $field.GetGormTags }} {{ end }}
}

func (e *{{ .Entity.Name }}) ToEntity() models.{{.Entity.Name}} {
	return models.{{ .Entity.Name }}{
		{{ range $field := .Entity.Fields }} 
		{{ $field.GoName }}: e.{{ $field.GoName }}, {{ end }}
	}
}

func MapEntity(e models.{{ .Entity.Name }}) {{ .Entity.Name }} {
	return {{ .Entity.Name }}{
		{{ range $field := .Entity.Fields }} 
		{{ $field.GoName }}: e.{{ $field.GoName }}, {{ end }}
	}
}

func MapCreateDTO(dto models.Create{{ .Entity.Name }}DTO) {{ .Entity.Name }} {
	return {{ .Entity.Name }}{
		{{ range $field := .Entity.Fields }} 
		{{- if $field.IsPrimaryKey }} {{ continue }} {{ end }}
		{{ $field.GoName }}: dto.{{ $field.GoName }}, {{ end }}
	}
}

`))

// TODO: remove unneeded newline after models.{

func GenerateModel(out io.Writer, ent schema.Entity, genCtx gen.GenerationContext) error {
	templateData := struct {
		gen.GenerationContext
		Entity schema.Entity
	}{
		GenerationContext: genCtx,
		Entity:            ent,
	}
	var generated bytes.Buffer
	err := entityTemplate.Execute(&generated, templateData)
	if err != nil {
		return fmt.Errorf("error while executing repo model template: %w", err)
	}
	if err := helpers.WriteFormatted(generated.Bytes(), out); err != nil {
		return fmt.Errorf("while formatting repo model file: %w", err)
	}
	return nil
}
