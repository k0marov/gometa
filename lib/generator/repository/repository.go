package repository

import (
	"bytes"
	"github.com/k0marov/gometa/lib/helpers"
	"github.com/k0marov/gometa/lib/schema"
	"io"
	"log"
	"text/template"
)

// TODO: add logs and error wraps in repo template
// TODO: add creating SQL table in repo
var repoTemplate = template.Must(template.New("").Parse(`
package {{.PackageName}} 

import (
    "gorm.io/gorm"
	"log"
	"errors"
    "{{.EntityImport}}"
	"{{.ModuleName}}/internal/clienterrs"
)

type RepositoryImpl struct {
    db *gorm.DB
}

func NewRepositoryImpl(db *gorm.DB) *RepositoryImpl {
    if err := db.AutoMigrate(&models.{{.EntityName}}{}); err != nil {
		log.Fatalf("failed migrating for {{.EntityName}}: %v", err) 
	}
    return &RepositoryImpl{db: db}
}

func (r *RepositoryImpl) Create(entity *models.{{ .EntityName }}) (*models.{{.EntityName}}, error) {
    return entity, r.db.Create(entity).Error
}

func (r *RepositoryImpl) Get(id uint64) (*models.{{ .EntityName }}, error) {
    entity := new(models.{{ .EntityName }})
    err := r.db.Where("id = ?", id).First(entity).Error
	if errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, clienterrs.ErrNotFound
	}
    return entity, err
}

func (r *RepositoryImpl) Update(entity *models.{{ .EntityName }}) error {
    return r.db.Model(entity).Updates(entity).Error
}

func (r *RepositoryImpl) Delete(id uint64) error {
    return r.db.Delete(&models.{{.EntityName}}{}, id).Error
}
`))

// TODO: добавить проброску контекста везде

func Generate(ent schema.Entity, out io.Writer, moduleName, packageName, entityImport string) {
	templateData := struct {
		ModuleName   string
		PackageName  string
		EntityImport string
		EntityName   string
	}{
		ModuleName:   moduleName,
		PackageName:  packageName,
		EntityImport: entityImport,
		EntityName:   ent.Name,
	}
	var generated bytes.Buffer
	err := repoTemplate.Execute(&generated, templateData)
	if err != nil {
		log.Fatalf("error while executing repository template: %v", err)
	}
	if err := helpers.WriteFormatted(generated.Bytes(), out); err != nil {
		log.Fatalf("while formatting repository file: %v", err)
	}
}
