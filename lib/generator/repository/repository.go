package repository

import (
	"bytes"
	"github.com/k0marov/gometa/lib/helpers"
	"github.com/k0marov/gometa/lib/schema"
	"io"
	"log"
	"text/template"
)

// TODO: add logs and error wraps in repo template
// TODO: add creating SQL table in repo
var repoTemplate = template.Must(template.New("").Parse(`
package repository 

import (
    "github.com/jinzhu/gorm"
    . "{{.EntityImport}}"
)

type {{ .EntityName }}RepositoryImpl struct {
    db *gorm.DB
}

func New{{ .EntityName }}RepositoryImpl(db *gorm.DB) {{ .EntityName }}RepositoryImpl {
    db.AutoMigrate(&{{.EntityName}}{})
    return {{ .EntityName }}RepositoryImpl{db: db}
}

func (r {{ .EntityName }}RepositoryImpl) Create(entity *{{ .EntityName }}) error {
    return r.db.Create(entity).Error
}

func (r {{ .EntityName }}RepositoryImpl) Get(id uint64) (*{{ .EntityName }}, error) {
    entity := new({{ .EntityName }})
    err := r.db.Limit(1).Where("id = ?", id).Find(entity).Error()
    return entity, err
}

func (r {{ .EntityName }}RepositoryImpl) Update(entity *{{ .EntityName }}) error {
    return r.db.Model(entity).Update(entity).Error
}

func (r {{ .EntityName }}RepositoryImpl) Delete(entity *{{ .EntityName }}) error {
    return r.db.Delete(entity).Error
}
`))

func Generate(ent schema.Entity, out io.Writer, entityImport string) {
	templateData := struct {
		EntityImport string
		EntityName   string
	}{
		EntityImport: entityImport,
		EntityName:   ent.Name,
	}
	var generated bytes.Buffer
	err := repoTemplate.Execute(&generated, templateData)
	if err != nil {
		log.Fatalf("error while executing repository template: %v", err)
	}
	helpers.WriteFormatted(generated.Bytes(), out)
}
