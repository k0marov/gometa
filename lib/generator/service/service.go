package service

import (
	"bytes"
	"github.com/k0marov/gometa/lib/helpers"
	"github.com/k0marov/gometa/lib/schema"
	"io"
	"log"
	"text/template"
)

var serviceTemplate = template.Must(template.New("").Parse(`
package {{ .PackageName }} 

type {{ .EntityName }}Repository interface {
    Get(id uint64) (*{{ .EntityName }}, error) 
    Create(entity *{{ .EntityName }}) error 
    Update(entity *{{ .EntityName }}) error 
    Delete(entity *{{ .EntityName }}) error 
}

type {{ .EntityName }}ServiceImpl struct {
    repo {{ .EntityName }}Repository
}

func New{{ .EntityName }}ServiceImpl(repo {{ .EntityName }}Repository) *{{ .EntityName }}ServiceImpl {
    return &{{ .EntityName }}ServiceImpl{repo: repo}
}

func (s *{{ .EntityName }}ServiceImpl) Get(id uint64) (*{{ .EntityName }}, error) {
    entity, err := s.repo.Get(id)
    // TODO: add business logic to {{ .EntityName }}Service.Get
    return entity, err
}

func (s *{{ .EntityName }}ServiceImpl) Create(entity *{{ .EntityName }}) error {
    // TODO: add business logic to {{ .EntityName }}Service.Create
    return s.repo.Create(entity)
}

func (s *{{ .EntityName }}ServiceImpl) Update(entity *{{ .EntityName }}) error {
    // TODO: add business logic to {{ .EntityName }}Service.Update
    return s.repo.Update(entity)
}

func (s *{{ .EntityName }}ServiceImpl) Delete(entity *{{ .EntityName }}) error {
    // TODO: add business logic to {{ .EntityName }}Service.Delete
    return s.repo.Delete(entity)
}
`))

// TODO: add returning id from Create

func Generate(ent schema.Entity, out io.Writer) {
	templateData := struct {
		PackageName string
		EntityName  string
	}{
		PackageName: ent.JsonName,
		EntityName:  ent.Name,
	}
	var generated bytes.Buffer
	err := serviceTemplate.Execute(&generated, templateData)
	if err != nil {
		log.Fatalf("error while executing service template: %v", err)
	}
	helpers.WriteFormatted(generated.Bytes(), out)
}
