package service

import (
	"bytes"
	"github.com/k0marov/gometa/lib/helpers"
	"github.com/k0marov/gometa/lib/schema"
	"io"
	"log"
	"text/template"
)

var serviceTemplate = template.Must(template.New("").Parse(`
package {{ .PackageName }}

import (
	"context"
    "{{ .EntityImport }}"
)

type Repo interface {
    Create(entity *models.{{ .EntityName }}) (*models.{{.EntityName}}, error)
    Get(id uint64) (*models.{{ .EntityName }}, error) 
    GetAll() ([]*models.{{ .EntityName }}, error) 
    Update(entity *models.{{ .EntityName }}) error 
    Delete(id uint64) error 
}

type ServiceImpl struct {
    repo Repo
}

func NewServiceImpl(repo Repo) *ServiceImpl {
    return &ServiceImpl{repo: repo}
}

func (s *ServiceImpl) Create(ctx context.Context, entity *models.{{ .EntityName }}) (*models.{{ .EntityName }}, error) {
    // TODO: add business logic to Service.Create
    return s.repo.Create(entity)
}

func (s *ServiceImpl) Get(ctx context.Context, id uint64) (*models.{{ .EntityName }}, error) {
    entity, err := s.repo.Get(id)
    // TODO: add business logic to Service.Get
    return entity, err
}

func (s *ServiceImpl) GetAll(ctx context.Context) ([]*models.{{ .EntityName }}, error) {
    // TODO: add business logic 
    return s.repo.GetAll()
}

func (s *ServiceImpl) Update(ctx context.Context, entity *models.{{ .EntityName }}) error {
    // TODO: add business logic to Service.Update
    return s.repo.Update(entity)
}

func (s *ServiceImpl) Delete(ctx context.Context, id uint64) error {
    // TODO: add business logic to Service.Delete
    return s.repo.Delete(id)
}
`))

// TODO: add returning id from Create

func Generate(ent schema.Entity, out io.Writer, entityImport string) {
	templateData := struct {
		PackageName  string
		EntityName   string
		EntityImport string
	}{
		PackageName:  ent.JsonName,
		EntityName:   ent.Name,
		EntityImport: entityImport,
	}
	var generated bytes.Buffer
	err := serviceTemplate.Execute(&generated, templateData)
	if err != nil {
		log.Fatalf("error while executing service template: %v", err)
	}
	if err := helpers.WriteFormatted(generated.Bytes(), out); err != nil {
		log.Fatalf("while formatting service file: %v", err)
	}
}
